// libvectext
//
// VecText vector font library
// (c) 2014 by Cylexia
//
//  Version:  2.14.1203
//
//  MIT License
//

var VecText = {
	_g_table_len: 0,
	_g_table_offset: 0,
	_g_data_offset: 0,

	_last_coff: 0,
	_last_clen: 0,

  _inited: false,
  
	init: function() {
	  if( !VecText._inited ) {
		  VecText._g_table_len = ((VecText._fdata[2] << 8) | VecText._fdata[3]);
		  VecText._g_table_offset = 6;
		  VecText._g_data_offset = (VecText._g_table_len + VecText._g_table_offset);
		  VecText._inited = true;
	  }
	},

	getGlyphWidth: function( s, lw ) {
	  if( !lw ) {
	    lw = 1;
	  }
		return ((s * 5) + lw);
	},

	getGlyphHeight: function( s, lh ) {
	  if( !lh ) {
	    lh = 1;
	  }
		return ((s * 8) + lh);
	},

	//function drawStringWithBackground( text as string, fg as integer, bg as integer, x as integer, y as integer, s as integer = 2, lw as integer = 1, lh as integer = 1 ) as integer
	drawStringWithBackground: function( g, text, fg, bg, x, y, s, lw, lh ) {
		var dw = (VecText.getGlyphWidth( s, lw ) * text.length);
		var dh = VecText.getGlyphHeight( s, lh );
		g.fillStyle = bg;
		p.strokeStyle = "none";
		g.fillRect( x, y, dw, dh );
		return VecText.drawString( g, text, fg, x, y, s, lw, lh );
	},

	//function drawString( text as string, clr as integer, x as integer, y as integer, s as integer = 2, lw as integer = 1, lh as integer = 1 ) as integer

	/**
	 * Draw a string
	 * @param g the canvas to draw onto
	 * @param text the string to write
	 * @param clr the colour to write in
	 * @param x x position
	 * @param y y position
	 * @param s character size
	 * @param lw line width
	 * @param lh line height
	 * @return y position for next row below this one
	 */
	//public int drawString(Canvas g, String text, int clr, int x, int y, int s, int lw, int lh) {
	drawString: function( g, text, clr, x, y, s, lw, lh ) {
		var cw = ((s * 5) + lw);
		var coff, clen;
		var i;
		g.strokeStyle = clr;
		g.lineWidth = 1;
		for( i = 0; i < text.length; i++ ) {
			if( VecText._getGlyphInfo( text.charCodeAt( i ) ) ) {
				VecText._drawGlyph( g, x, y, lw, lh, s, null, VecText._last_coff, VecText._last_clen );
			}
			x += cw;
		}
		return (y + (s * 9) + lh);
	},

	//function _getGlyphInfo( g as ubyte, byref coff as integer, byref clen as integer ) as integer
	_getGlyphInfo : function( g ) {
		if( g === 0 ) {
			return false;
		}
		var i, coffnext, l = (VecText._g_data_offset + VecText._g_table_len - 1);
		for( i = VecText._g_table_offset; i < l; i += 3 ) {
			if( VecText._fdata[i] == g ) {
				VecText._last_coff = ((VecText._fdata[i + 1] << 8) | VecText._fdata[i + 2]);
				coffnext = ((VecText._fdata[i + 4] << 8) | VecText._fdata[i + 5]);
				VecText._last_clen = (coffnext - VecText._last_coff);
				return true;
			}
		}
		return false;
	},

	//sub _drawGlyph( dleft as integer, dtop as integer, dwidth as integer, dheight as integer, dsize as integer, dclr as integer, coff as integer, clen as integer )
	_drawGlyph: function( g, dleft, dtop, dwidth, dheight, dsize, p, coff, clen ) {
	  // p is unused but is here so the signature matches the Java version
		var y, x, i = 0;
		var dx, dy, dd, dl, dw, dh;
		coff += VecText._g_data_offset;

		// adjusts the diagonals to look the same width as the straights (rms)
		// but causes the straights to cut into them horribly :(
		//dwidtha = dwidth / 1.44

		//debug: draw a grid showing the coordinates we're using
		//for x = 0 to 5
		//    for y = 0 to 7
		//        line (dleft+(x * dsize),dtop+(y*dsize))-STEP((dwidth),(dheight)),RGB(0,255,0),B
		//    next
		//next

		for( i = coff; i < (coff + clen); i += 2 ) {
			x = VecText._fdata[i] >> 4;
			y = VecText._fdata[i] & 0xF;
			dd = VecText._fdata[i + 1] >> 4;
			dl = (VecText._fdata[i + 1] & 0xF);
			dl *= dsize;     // adjust scale

			//print "will draw type "; dd; " at "; dx; ","; dy; " for "; dl
			dy = (dtop + (y * dsize));
			for( dh = 1; dh <= dheight; dh += 1 ) {
				dx = (dleft + (x * dsize));
				switch( dd ) {
					case 0:
						for( dw = 1; dw <= dwidth; dw++ ) {
							VecText._drawLine( g, dx, dy, (dx + dl), (dy - dl), p );
							dx++;
						}
						break;
					case 1:
						VecText._drawLine( g, dx, dy, (dx + dl + dwidth), dy, p );
						break;
					case 2:
						for( dw = 1; dw <= dwidth; dw++ ) {
							VecText._drawLine( g, dx, dy, (dx + dl), (dy + dl), p );
							dx += 1;
						}
						break;
					case 3:
						for( dw = 1; dw <= dwidth; dw++ ) {
							VecText._drawLine( g, dx, dy, dx, (dy + dl + 1), p );
							dx += 1;
						}
						break;
				}
				dy += 1;
			}
		}
	},
	
	_drawLine: function( g, x1, y1, x2, y2 ) {
	  g.beginPath();
	  //g.moveTo( x1+0.5, y1+0.5 );
	  //g.lineTo( x2+0.5, y2+0.5 );
	  g.moveTo( x1, y1 );
	  g.lineTo( x2, y2 );
	  g.stroke();
	},
	
	_fdata: [
			0x01,	0x00,	0x00,	0xFC,	0x03,	0x7A,	0x41,	0x00,
			0x00,	0x42,	0x00,	0x0C,	0x43,	0x00,	0x20,	0x44,
			0x00,	0x2A,	0x45,	0x00,	0x36,	0x46,	0x00,	0x3E,
			0x47,	0x00,	0x44,	0x48,	0x00,	0x52,	0x49,	0x00,
			0x58,	0x4A,	0x00,	0x5E,	0x4B,	0x00,	0x68,	0x4C,
			0x00,	0x70,	0x4D,	0x00,	0x74,	0x4E,	0x00,	0x7C,
			0x4F,	0x00,	0x82,	0x50,	0x00,	0x92,	0x51,	0x00,
			0x9E,	0x52,	0x00,	0xB0,	0x53,	0x00,	0xBE,	0x54,
			0x00,	0xD0,	0x55,	0x00,	0xD4,	0x56,	0x00,	0xDE,
			0x57,	0x00,	0xE6,	0x58,	0x00,	0xEE,	0x59,	0x00,
			0xFA,	0x5A,	0x01,	0x04,	0x61,	0x01,	0x0E,	0x62,
			0x01,	0x1E,	0x63,	0x01,	0x2E,	0x64,	0x01,	0x38,
			0x65,	0x01,	0x48,	0x66,	0x01,	0x58,	0x67,	0x01,
			0x60,	0x68,	0x01,	0x74,	0x69,	0x01,	0x7C,	0x6A,
			0x01,	0x88,	0x6B,	0x01,	0x98,	0x6C,	0x01,	0xA4,
			0x6D,	0x01,	0xAA,	0x6E,	0x01,	0xB4,	0x6F,	0x01,
			0xBC,	0x70,	0x01,	0xCC,	0x71,	0x01,	0xD8,	0x72,
			0x01,	0xE4,	0x73,	0x01,	0xEC,	0x74,	0x01,	0xFA,
			0x75,	0x02,	0x02,	0x76,	0x02,	0x0C,	0x77,	0x02,
			0x14,	0x78,	0x02,	0x22,	0x79,	0x02,	0x26,	0x7A,
			0x02,	0x36,	0x31,	0x02,	0x3C,	0x32,	0x02,	0x42,
			0x33,	0x02,	0x4E,	0x34,	0x02,	0x5C,	0x35,	0x02,
			0x62,	0x36,	0x02,	0x70,	0x37,	0x02,	0x84,	0x38,
			0x02,	0x8C,	0x39,	0x02,	0xAA,	0x30,	0x02,	0xBA,
			0x2E,	0x02,	0xCC,	0x2C,	0x02,	0xD2,	0x3A,	0x02,
			0xDA,	0x3B,	0x02,	0xE6,	0x21,	0x02,	0xF4,	0x3F,
			0x02,	0xFC,	0x27,	0x03,	0x0C,	0x22,	0x03,	0x12,
			0x24,	0x03,	0x1E,	0x28,	0x03,	0x2A,	0x29,	0x03,
			0x30,	0x25,	0x03,	0x36,	0x7D,	0x03,	0x48,	0x7B,
			0x03,	0x4E,	0x2F,	0x03,	0x54,	0x5C,	0x03,	0x56,
			0x2D,	0x03,	0x58,	0x2B,	0x03,	0x5A,	0x2A,	0x03,
			0x5E,	0x5E,	0x03,	0x66,	0x26,	0x03,	0x6A,	0x00,
			0x03,	0x7A,	0x01,	0x35,	0x01,	0x01,	0x10,	0x12,
			0x30,	0x21,	0x41,	0x35,	0x03,	0x14,	0x00,	0x36,
			0x00,	0x13,	0x30,	0x21,	0x41,	0x31,	0x33,	0x01,
			0x33,	0x21,	0x44,	0x31,	0x06,	0x13,	0x36,	0x01,
			0x03,	0x13,	0x10,	0x13,	0x01,	0x01,	0x01,	0x34,
			0x05,	0x21,	0x16,	0x13,	0x00,	0x13,	0x30,	0x21,
			0x06,	0x13,	0x36,	0x01,	0x41,	0x34,	0x00,	0x36,
			0x00,	0x36,	0x00,	0x14,	0x03,	0x13,	0x06,	0x14,
			0x00,	0x36,	0x00,	0x14,	0x03,	0x13,	0x10,	0x13,
			0x01,	0x01,	0x01,	0x34,	0x05,	0x21,	0x16,	0x13,
			0x43,	0x33,	0x33,	0x11,	0x00,	0x36,	0x40,	0x36,
			0x03,	0x14,	0x20,	0x36,	0x00,	0x14,	0x06,	0x14,
			0x20,	0x12,	0x40,	0x35,	0x36,	0x01,	0x05,	0x21,
			0x16,	0x12,	0x00,	0x36,	0x13,	0x03,	0x13,	0x23,
			0x03,	0x11,	0x00,	0x36,	0x06,	0x14,	0x00,	0x36,
			0x00,	0x22,	0x22,	0x02,	0x40,	0x36,	0x00,	0x36,
			0x00,	0x24,	0x40,	0x36,	0x01,	0x34,	0x41,	0x34,
			0x10,	0x12,	0x16,	0x12,	0x01,	0x01,	0x30,	0x21,
			0x05,	0x21,	0x36,	0x01,	0x00,	0x36,	0x00,	0x13,
			0x30,	0x21,	0x03,	0x13,	0x33,	0x01,	0x41,	0x31,
			0x01,	0x34,	0x41,	0x34,	0x10,	0x12,	0x16,	0x12,
			0x01,	0x01,	0x30,	0x21,	0x05,	0x21,	0x36,	0x01,
			0x24,	0x22,	0x00,	0x36,	0x00,	0x13,	0x30,	0x21,
			0x03,	0x13,	0x33,	0x01,	0x41,	0x31,	0x13,	0x23,
			0x10,	0x13,	0x01,	0x01,	0x01,	0x31,	0x02,	0x21,
			0x13,	0x12,	0x33,	0x21,	0x44,	0x31,	0x06,	0x13,
			0x36,	0x01,	0x00,	0x14,	0x20,	0x36,	0x00,	0x35,
			0x05,	0x21,	0x16,	0x12,	0x36,	0x01,	0x40,	0x35,
			0x00,	0x34,	0x04,	0x22,	0x26,	0x02,	0x40,	0x34,
			0x00,	0x36,	0x06,	0x02,	0x24,	0x22,	0x40,	0x36,
			0x00,	0x31,	0x40,	0x31,	0x05,	0x31,	0x45,	0x31,
			0x01,	0x24,	0x05,	0x04,	0x00,	0x31,	0x40,	0x31,
			0x01,	0x22,	0x23,	0x02,	0x23,	0x33,	0x00,	0x14,
			0x06,	0x14,	0x40,	0x31,	0x05,	0x31,	0x05,	0x04,
			0x02,	0x13,	0x32,	0x21,	0x43,	0x33,	0x05,	0x01,
			0x14,	0x13,	0x05,	0x21,	0x16,	0x12,	0x36,	0x01,
			0x00,	0x36,	0x03,	0x01,	0x12,	0x12,	0x32,	0x21,
			0x43,	0x32,	0x05,	0x21,	0x16,	0x12,	0x36,	0x01,
			0x03,	0x01,	0x12,	0x13,	0x03,	0x32,	0x05,	0x21,
			0x16,	0x13,	0x03,	0x01,	0x12,	0x12,	0x32,	0x21,
			0x03,	0x32,	0x05,	0x21,	0x16,	0x12,	0x36,	0x01,
			0x40,	0x36,	0x03,	0x01,	0x12,	0x12,	0x32,	0x21,
			0x03,	0x32,	0x05,	0x21,	0x16,	0x13,	0x04,	0x14,
			0x43,	0x31,	0x11,	0x35,	0x11,	0x01,	0x20,	0x12,
			0x03,	0x13,	0x03,	0x01,	0x12,	0x12,	0x32,	0x21,
			0x03,	0x31,	0x04,	0x21,	0x15,	0x12,	0x35,	0x01,
			0x42,	0x34,	0x07,	0x13,	0x37,	0x01,	0x00,	0x36,
			0x02,	0x13,	0x32,	0x21,	0x43,	0x33,	0x06,	0x14,
			0x22,	0x34,	0x12,	0x11,	0x10,	0x21,	0x10,	0x11,
			0x20,	0x31,	0x42,	0x34,	0x06,	0x21,	0x17,	0x12,
			0x37,	0x01,	0x22,	0x12,	0x20,	0x21,	0x20,	0x11,
			0x30,	0x31,	0x00,	0x36,	0x04,	0x11,	0x14,	0x22,
			0x36,	0x11,	0x14,	0x02,	0x32,	0x11,	0x06,	0x14,
			0x10,	0x11,	0x20,	0x36,	0x02,	0x34,	0x02,	0x13,
			0x22,	0x34,	0x32,	0x21,	0x43,	0x33,	0x02,	0x34,
			0x02,	0x13,	0x32,	0x21,	0x43,	0x33,	0x03,	0x01,
			0x12,	0x12,	0x32,	0x21,	0x43,	0x32,	0x03,	0x32,
			0x05,	0x21,	0x16,	0x12,	0x36,	0x01,	0x02,	0x35,
			0x02,	0x13,	0x32,	0x21,	0x43,	0x31,	0x05,	0x13,
			0x35,	0x01,	0x03,	0x01,	0x12,	0x13,	0x42,	0x35,
			0x03,	0x31,	0x04,	0x21,	0x15,	0x13,	0x02,	0x34,
			0x03,	0x01,	0x12,	0x12,	0x32,	0x21,	0x06,	0x13,
			0x36,	0x01,	0x03,	0x01,	0x12,	0x13,	0x03,	0x21,
			0x14,	0x12,	0x34,	0x21,	0x10,	0x35,	0x15,	0x21,
			0x26,	0x12,	0x02,	0x13,	0x02,	0x33,	0x05,	0x21,
			0x16,	0x12,	0x36,	0x01,	0x42,	0x34,	0x02,	0x32,
			0x04,	0x22,	0x26,	0x02,	0x42,	0x32,	0x02,	0x33,
			0x05,	0x21,	0x16,	0x01,	0x25,	0x21,	0x36,	0x01,
			0x23,	0x32,	0x42,	0x33,	0x02,	0x24,	0x06,	0x04,
			0x02,	0x32,	0x04,	0x21,	0x15,	0x12,	0x35,	0x01,
			0x42,	0x34,	0x06,	0x21,	0x17,	0x12,	0x37,	0x01,
			0x02,	0x14,	0x06,	0x04,	0x06,	0x14,	0x02,	0x02,
			0x20,	0x36,	0x06,	0x14,	0x01,	0x01,	0x10,	0x12,
			0x30,	0x21,	0x06,	0x04,	0x41,	0x31,	0x06,	0x14,
			0x00,	0x14,	0x13,	0x03,	0x13,	0x12,	0x33,	0x21,
			0x06,	0x13,	0x36,	0x01,	0x44,	0x31,	0x30,	0x36,
			0x03,	0x03,	0x03,	0x14,	0x00,	0x14,	0x00,	0x33,
			0x03,	0x13,	0x33,	0x21,	0x06,	0x13,	0x36,	0x01,
			0x44,	0x31,	0x10,	0x13,	0x01,	0x01,	0x01,	0x34,
			0x05,	0x21,	0x16,	0x12,	0x36,	0x01,	0x04,	0x01,
			0x13,	0x12,	0x33,	0x21,	0x44,	0x31,	0x00,	0x14,
			0x40,	0x31,	0x23,	0x02,	0x23,	0x33,	0x01,	0x01,
			0x10,	0x12,	0x30,	0x21,	0x41,	0x31,	0x05,	0x21,
			0x16,	0x12,	0x36,	0x01,	0x01,	0x31,	0x04,	0x31,
			0x44,	0x31,	0x02,	0x21,	0x04,	0x01,	0x13,	0x12,
			0x33,	0x01,	0x33,	0x21,	0x01,	0x01,	0x10,	0x12,
			0x30,	0x21,	0x41,	0x35,	0x01,	0x31,	0x02,	0x21,
			0x13,	0x12,	0x33,	0x01,	0x01,	0x01,	0x10,	0x12,
			0x30,	0x21,	0x41,	0x34,	0x01,	0x34,	0x05,	0x21,
			0x16,	0x12,	0x36,	0x01,	0x05,	0x04,	0x15,	0x11,
			0x15,	0x21,	0x25,	0x31,	0x15,	0x11,	0x15,	0x21,
			0x25,	0x31,	0x17,	0x01,	0x15,	0x11,	0x15,	0x21,
			0x25,	0x31,	0x13,	0x11,	0x13,	0x21,	0x23,	0x31,
			0x15,	0x11,	0x15,	0x21,	0x25,	0x31,	0x17,	0x01,
			0x13,	0x11,	0x13,	0x21,	0x23,	0x31,	0x15,	0x11,
			0x15,	0x21,	0x25,	0x31,	0x20,	0x34,	0x15,	0x11,
			0x15,	0x21,	0x25,	0x31,	0x01,	0x01,	0x10,	0x12,
			0x30,	0x21,	0x23,	0x02,	0x23,	0x31,	0x10,	0x11,
			0x10,	0x21,	0x20,	0x31,	0x00,	0x11,	0x00,	0x21,
			0x10,	0x31,	0x30,	0x11,	0x30,	0x21,	0x40,	0x31,
			0x06,	0x14,	0x06,	0x01,	0x11,	0x34,	0x11,	0x01,
			0x20,	0x12,	0x03,	0x14,	0x12,	0x02,	0x12,	0x33,
			0x15,	0x22,	0x10,	0x22,	0x32,	0x33,	0x17,	0x02,
			0x05,	0x04,	0x00,	0x11,	0x00,	0x31,	0x01,	0x11,
			0x10,	0x31,	0x35,	0x11,	0x35,	0x31,	0x45,	0x31,
			0x36,	0x11,	0x03,	0x14,	0x21,	0x22,	0x25,	0x02,
			0x03,	0x14,	0x03,	0x02,	0x03,	0x22,	0x05,	0x04,
			0x01,	0x24,	0x03,	0x14,	0x03,	0x14,	0x21,	0x34,
			0x03,	0x14,	0x21,	0x34,	0x01,	0x24,	0x05,	0x04,
			0x11,	0x01,	0x20,	0x21,	0x01,	0x24,	0x01,	0x01,
			0x10,	0x21,	0x12,	0x01,	0x03,	0x01,	0x03,	0x32,
			0x05,	0x21,	0x16,	0x03
	]
};
